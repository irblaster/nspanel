# NSPanel YAML by marcfager. Please check github for credits: https://github.com/marcfager/nspanel-mf
# Version 2022-01-19

substitutions:
  # Name the device and it's entities
  device_name: nspanel-dev

# Example config.yaml
esphome:
  name: nspanel
  comment: $device_name


esp32:
  framework:
#    type : arduino    
    type: esp-idf
  board: esp32dev

#esp32:
#  board: esp32dev

# Wifi settings. Add these to your secrets.yaml. fast_connect must be true for a hidden ssid.
wifi:
  #ssid: !secret wifi_ssid
  ssid: abcd
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ACT Fallback Hotspot"
    password: "ACT1234!"

captive_portal:
        

# Logger. Disable the temperature sensor etc. to focus on the HMI development
logger:
  baud_rate: 0
  level: DEBUG
  logs:
    sensor: WARN
    resistance: WARN
    text_sensor: WARN
    ntc: WARN

# OTA (Over the air updates) password. Add to your secrets.yaml
ota:
  password: ACT123




# Enable Home Assistant API
api:
  services:
    - service: upload_tft
      then:
        - lambda: 'id(disp1)->upload_tft();'

# A reboot button is always useful
button:
  - platform: restart
    name: Restart $device_name



# Configure UART for communicating with the screen
uart:
  - id: tf_uart
    tx_pin: 16
    rx_pin: 17
    baud_rate: 115200
  - id: hw_uart
    tx_pin: 1
    rx_pin: 3
    baud_rate: 38400

# Define some inputs
binary_sensor:
  - platform: gpio
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    on_click:
     then:
     - uart.write:
        id: hw_uart
        data: [0x81]
     

  - platform: gpio
    name: $device_name Right Button
    pin:
      number: 27
      inverted: true
    on_click:
     then:
     - uart.write:
        id: hw_uart
        data: [0x82]
    
  
  - platform: nextion
    name: $device_name standby
    page_id: 0
    component_id: 1
    on_press: 
     then:
     - uart.write:
        id: hw_uart
        data: [0x83]


  - platform: nextion
    name: $device_name eco
    page_id: 0
    component_id: 2
    on_press: 
     then:
     - uart.write:
        id: hw_uart
        data: [0x87]


  - platform: nextion
    name: $device_name run
    page_id: 0
    component_id: 3
    on_press: 
     then:
     - uart.write:
        id: hw_uart
        data: [0x82]



sensor:
  - platform: wifi_signal
    name: $device_name WiFi Signal
    update_interval: 60s

  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25Â°C
      reference_resistance: 10kOhm
    name: $device_name Temperature

  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db

  # Grab current temperature from Home Assistant
  - platform: homeassistant
    id: current_temperature
    entity_id: weather.home
    attribute: temperature
    on_value:
      # Push it to the display
      then:
        - lambda: 'id(disp1).set_component_text_printf("temp", "%.1f ""\xb0""F", x);'

# Define some outputs
switch:
  # The two relays
  - platform: gpio
    name: $device_name Relay 1
    id: relay_1
    pin:
      number: 22
  - platform: gpio
    name: $device_name Relay 2
    id: relay_2
    pin:
      number: 19

  # Pin 4 always needs to be on to power up the display
  - platform: gpio
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON

number:
  platform: template
  name: $device_name Brightness
  id: brightness
  entity_category: config
  unit_of_measurement: '%'
  min_value: 0
  max_value: 100
  step: 1
  initial_value: 30
  set_action:
    then:
      - lambda: 'id(disp1).set_backlight_brightness(x/100);'

# Configure the internal bleeper
output:
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21

# Enable ringtone music support
rtttl:
  id: buzzer
  output: buzzer_out



# Configure the screen itself
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: https://github.com/irblaster/nspanel/raw/main/nspanel_demo.tft
    # A little fun...
  #  on_setup:
  #    then:
  #      - number.set:
  #          id: brightness
  #          value: 30
  #      - lambda: |-
  #          id(disp1).set_component_text_printf(
  #            "temp", "%.1f ""\xb0""F", id(current_temperature).state
  #          );
  #      - rtttl.play: "twobits:d=4,o=5,b=220:c6,8g,8g,a,g,p,b,c6"




# Uart for the Nextion display
#uart:
#  tx_pin: 16
#  rx_pin: 17
#  baud_rate: 115200
#  id: tf_uart

# Functionality for the Nextion display
# Not sure this is needed, see https://github.com/esphome/esphome/pull/2956
#external_components:
#  - source: github://pr#2956
#    components: [nextion]
#    refresh: 1h

